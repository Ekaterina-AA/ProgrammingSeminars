-- execute this in target database context

CREATE TABLE "employees" (
    "id" INT CONSTRAINT "id_key_employees" PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    "name" VARCHAR(100) NOT NULL,
    "salary" MONEY NOT NULL
);

CREATE TABLE "roles" (
    "id" INT CONSTRAINT "id_key_roles" PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    "name" VARCHAR(100) NOT NULL,
    "description" VARCHAR(10485760) NOT NULL
);

INSERT INTO "roles"("name", "description")
  VALUES
    ('CEO', 'Chief Executive Officer'),
    ('CTO', 'Chief Technical Officer'),
    ('Engineer', 'Engineer'),
    ('Programmer', 'Programmer');

ALTER TABLE "employees"
  ADD COLUMN "role_id" INT NOT NULL REFERENCES "roles"("id") DEFAULT 4;

CREATE PROCEDURE "TestStoredProcedure"
    (

    )
LANGUAGE sql
AS $$
    SELECT *
      FROM "roles";

    SELECT "e"."name" AS "name",
           "e"."salary" AS "salary",
           "r"."name" AS "role",
           "r"."description" AS "role_description"
      FROM "employees" "e"
        LEFT JOIN "roles" "r"
          ON "e"."role_id" = "r"."id";
$$;

CREATE TABLE "logs" (
    "id" INT CONSTRAINT "id_key_logs" PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
    "description" VARCHAR(10485760) NOT NULL,
    "created_at" TIMESTAMP NOT NULL
);

CREATE OR REPLACE FUNCTION f_employees_after_insertion() RETURNS TRIGGER
AS $f_employees_after_insertion$
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO "logs"("description", "created_at")
            VALUES('Inserted employee: ' || NEW.name || ', '
                       || NEW.salary || ', ' ||
                       (SELECT "name"
                           FROM "roles"
                           WHERE "id" = NEW.role_id)
                       , CURRENT_TIMESTAMP);

        RETURN NEW;
    END IF;

    RETURN NULL;
END;
$f_employees_after_insertion$ LANGUAGE plpgsql;

CREATE TRIGGER "employees_after_insertion" AFTER INSERT
    ON "employees"
    FOR EACH ROW EXECUTE PROCEDURE "f_employees_after_insertion"();

CREATE PROCEDURE "insertion_sp"
    (
        "name" VARCHAR(50),
        "salary" MONEY,
        "role_id" INTEGER DEFAULT 4
    )
LANGUAGE sql
AS $$
    INSERT INTO "employees"
      VALUES ((SELECT MAX("e"."id") + 1
                 FROM "employees" AS "e"), "name", "salary", "role_id");
$$;

CREATE FUNCTION "test_function"
    (

    ) RETURNS TABLE("name" varchar, "salary" money, "role" varchar, "description" varchar)
AS $$
    SELECT "e"."name" AS "name",
           "e"."salary" AS "salary",
           "r"."name" AS "role",
           "r"."description" AS "role_description"
      FROM "employees" "e"
        LEFT JOIN "roles" "r"
          ON "e"."role_id" = "r"."id";
$$
LANGUAGE sql;